package com.example.byeoldori.data.local.datastore

import android.content.Context
import androidx.datastore.preferences.core.edit
import androidx.datastore.preferences.core.longPreferencesKey
import androidx.datastore.preferences.core.stringPreferencesKey
import androidx.datastore.preferences.preferencesDataStore
import dagger.hilt.android.qualifiers.ApplicationContext
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.flow.map
import kotlinx.coroutines.runBlocking
import javax.inject.Inject
import javax.inject.Singleton

// ‚ö†Ô∏è Ïù¥ ÌååÏùº ÌïòÎÇòÏóêÏÑúÎßå ÏÑ†Ïñ∏ÌïòÏÑ∏Ïöî. (Ï§ëÎ≥µ ÏÑ†Ïñ∏ Í∏àÏßÄ)
private val Context.dataStore by preferencesDataStore(name = "auth_prefs")

@Singleton
class TokenDataStore @Inject constructor(
    @ApplicationContext private val context: Context
) {
    private val KEY_ACCESS       = stringPreferencesKey("access_token")
    private val KEY_REFRESH      = stringPreferencesKey("refresh_token")
    private val KEY_TOKEN_TYPE   = stringPreferencesKey("token_type") // Í∏∞Î≥∏ Bearer
    private val KEY_AT_EXPIRES   = longPreferencesKey("access_token_expires_at")
    private val KEY_RT_EXPIRES   = longPreferencesKey("refresh_token_expires_at")

    // ------------------------------
    // Ï†ÄÏû•/ÏÇ≠Ï†ú
    // ------------------------------

    /**
     * Ïï°ÏÑ∏Ïä§/Î¶¨ÌîÑÎ†àÏãú ÌÜ†ÌÅ∞ + ÎßåÎ£åÏãúÍ∞Å Ï†ÄÏû•
     * @param access ÌÜ†ÌÅ∞ Î¨∏ÏûêÏó¥
     * @param refresh ÌÜ†ÌÅ∞ Î¨∏ÏûêÏó¥(ÏóÜÏúºÎ©¥ null)
     * @param atExp Ïï°ÏÑ∏Ïä§ ÌÜ†ÌÅ∞ ÎßåÎ£åÏãúÍ∞Å (epochMillis Í∂åÏû•)  ‚Üê ÏÑúÎ≤Ñ Îã®ÏúÑÏôÄ ÎèôÏùºÌï¥Ïïº Ìï®!
     * @param rtExp Î¶¨ÌîÑÎ†àÏãú ÌÜ†ÌÅ∞ ÎßåÎ£åÏãúÍ∞Å (epochMillis Í∂åÏû•)
     * @param tokenType "Bearer" Îì±
     */
    suspend fun saveTokens(
        access: String,
        refresh: String?,
        atExp: Long?,
        rtExp: Long?,
        tokenType: String = "Bearer"
    ) {
        context.dataStore.edit { prefs ->
            prefs[KEY_ACCESS] = access
            prefs[KEY_TOKEN_TYPE] = tokenType

            if (refresh != null) prefs[KEY_REFRESH] = refresh else prefs.remove(KEY_REFRESH)
            if (atExp != null)   prefs[KEY_AT_EXPIRES] = atExp   else prefs.remove(KEY_AT_EXPIRES)
            if (rtExp != null)   prefs[KEY_RT_EXPIRES] = rtExp   else prefs.remove(KEY_RT_EXPIRES)
        }
    }

    /**
     * Ïï°ÏÑ∏Ïä§ ÌÜ†ÌÅ∞Îßå Í∞±Ïã†(Ïû¨Î∞úÍ∏â ÏÑ±Í≥µ ÌõÑ RT Í∑∏ÎåÄÎ°úÏù∏ Í≤ΩÏö∞)
     */
    suspend fun saveAccessToken(
        access: String,
        atExp: Long? = null,
        tokenType: String = "Bearer"
    ) {
        context.dataStore.edit { prefs ->
            prefs[KEY_ACCESS] = access
            prefs[KEY_TOKEN_TYPE] = tokenType
            if (atExp != null) prefs[KEY_AT_EXPIRES] = atExp
        }
    }

    /** Î™®Îëê ÏÇ≠Ï†ú(Î°úÍ∑∏ÏïÑÏõÉ Îì±) */
    suspend fun clear() {
        context.dataStore.edit { prefs ->
            prefs.remove(KEY_ACCESS)
            prefs.remove(KEY_REFRESH)
            prefs.remove(KEY_TOKEN_TYPE)
            prefs.remove(KEY_AT_EXPIRES)
            prefs.remove(KEY_RT_EXPIRES)
        }
        // üî• ÎîîÎ≤ÑÍ∑∏ Î°úÍ∑∏: ÏÇ≠Ï†ú ÏßÅÌõÑ ÏÉÅÌÉú Ï∂úÎ†•
        val access = runBlocking { accessTokenFlow.first() }
        val refresh = runBlocking { refreshTokenFlow.first() }
        val type = runBlocking { tokenTypeFlow.first() }
        val atExp = runBlocking { accessTokenExpiresAtFlow.first() }
        val rtExp = runBlocking { refreshTokenExpiresAtFlow.first() }

        println("üî• TokenDataStore.clear() called")
        println("   accessToken = $access")
        println("   refreshToken = $refresh")
        println("   tokenType = $type")
        println("   accessTokenExpiresAt = $atExp")
        println("   refreshTokenExpiresAt = $rtExp")
    }

    // ------------------------------
    // Flow (ÎπÑÎèôÍ∏∞)
    // ------------------------------

    val accessTokenFlow: Flow<String?> = context.dataStore.data.map { it[KEY_ACCESS] }
    val refreshTokenFlow: Flow<String?> = context.dataStore.data.map { it[KEY_REFRESH] }
    val tokenTypeFlow:  Flow<String>    = context.dataStore.data.map { it[KEY_TOKEN_TYPE] ?: "Bearer" }

    val accessTokenExpiresAtFlow: Flow<Long?> =
        context.dataStore.data.map { it[KEY_AT_EXPIRES] }

    val refreshTokenExpiresAtFlow: Flow<Long?> =
        context.dataStore.data.map { it[KEY_RT_EXPIRES] }

    val authHeaderFlow: Flow<String?> = context.dataStore.data.map {
        val token = it[KEY_ACCESS] ?: return@map null
        val type  = it[KEY_TOKEN_TYPE] ?: "Bearer"
        "$type $token"
    }
    val isLoggedInFlow: Flow<Boolean> = context.dataStore.data.map {
        it[KEY_ACCESS]?.isNotBlank() == true
    }

    // ------------------------------
    // ÎèôÍ∏∞ Ï°∞Ìöå(Interceptor/AuthenticatorÏóêÏÑú Í∞ÄÎ≥çÍ≤å ÏîÄ)
    // ------------------------------

    /** ÌòÑÏû¨ AccessToken */
    fun getAccessToken(): String? = runBlocking { accessTokenFlow.first() }

    /** ÌòÑÏû¨ RefreshToken */
    fun refreshToken(): String? = runBlocking { refreshTokenFlow.first() } // ‚Üê AuthenticatorÏóêÏÑú ÏÇ¨Ïö©

    /** "Bearer xxx" ÌòïÌÉú Authorization Ìó§Îçî */
    fun getAuthHeader(): String? = runBlocking { authHeaderFlow.first() }

    /** Ïï°ÏÑ∏Ïä§ ÌÜ†ÌÅ∞ ÎßåÎ£åÏãúÍ∞Å (epochMillis Í∂åÏû•) */
    fun accessTokenExpiresAt(): Long? = runBlocking { accessTokenExpiresAtFlow.first() }

    /** Î¶¨ÌîÑÎ†àÏãú ÌÜ†ÌÅ∞ ÎßåÎ£åÏãúÍ∞Å (epochMillis Í∂åÏû•) */
    fun refreshTokenExpiresAt(): Long? = runBlocking { refreshTokenExpiresAtFlow.first() }

    // ------------------------------
    // (ÏÑ†ÌÉù) Ìé∏Ïùò Ìï®Ïàò
    // ------------------------------

    /** Ïï°ÏÑ∏Ïä§ ÌÜ†ÌÅ∞Ïù¥ ÎßåÎ£åÎêòÏóàÎäîÏßÄ(ÏÑúÎ≤Ñ/ÌÅ¥Îùº ÏãúÍ≥Ñ Ïò§Ï∞® Í≥†Î†§Ìï¥ Ïó¨Ïú† ms Ï†ÅÏö© Í∞ÄÎä•) */
    fun isAccessTokenExpired(nowMillis: Long = System.currentTimeMillis(), leewayMs: Long = 5_000): Boolean {
        val exp = accessTokenExpiresAt() ?: return false // ÏóÜÏúºÎ©¥ ÌåêÎã® Î∂àÍ∞Ä ‚Üí ÏùºÎã® false
        return nowMillis + leewayMs >= exp
    }

    /** Î¶¨ÌîÑÎ†àÏãú ÌÜ†ÌÅ∞Ïù¥ ÎßåÎ£åÎêòÏóàÎäîÏßÄ */
    fun isRefreshTokenExpired(nowMillis: Long = System.currentTimeMillis(), leewayMs: Long = 5_000): Boolean {
        val exp = refreshTokenExpiresAt() ?: return false
        return nowMillis + leewayMs >= exp
    }
}
